/*
* generated by Xtext
*/
package org.example.entities.ui.quickfix

import org.eclipse.xtext.ui.editor.quickfix.DefaultQuickfixProvider
import org.example.entities.validation.EntitiesValidator
import org.eclipse.xtext.validation.Issue
import org.eclipse.xtext.ui.editor.quickfix.IssueResolutionAcceptor
import org.eclipse.xtext.ui.editor.quickfix.Fix
import org.example.entities.entities.Attribute
import org.example.entities.entities.Entity
import org.eclipse.xtext.diagnostics.Diagnostic
import static extension org.eclipse.xtext.EcoreUtil2.*
import org.example.entities.entities.Model
import org.example.entities.entities.EntitiesFactory

//import org.eclipse.xtext.ui.editor.quickfix.Fix
//import org.eclipse.xtext.ui.editor.quickfix.IssueResolutionAcceptor
//import org.eclipse.xtext.validation.Issue

/**
 * Custom quickfixes.
 *
 * see http://www.eclipse.org/Xtext/documentation.html#quickfixes
 */
class EntitiesQuickfixProvider extends DefaultQuickfixProvider
{
  @Fix(EntitiesValidator.ms_DUBIOUS_ENTITY_NAME)
  def void capitalizeEntityNameFirstLetter(Issue issue, IssueResolutionAcceptor acceptor)
  {
    acceptor.accept(
      issue,
      "Capitalize first letter",
      "Capitalize first letter of '" + issue.data.get(0) + "'",
      "Entity.gif",
      [
        context |
        val xtextDocument = context.xtextDocument
        val firstLetter = xtextDocument.get(issue.offset, 1)
        xtextDocument.replace(issue.offset, 1, firstLetter.toFirstUpper)
      ]
    )
  }

  @Fix(EntitiesValidator.ms_DUBIOUS_ATTRIBUTE_NAME)
  def void setAttributeNameFirstLetterToLowerCase(Issue issue, IssueResolutionAcceptor acceptor)
  {
    acceptor.accept(
      issue,
      "Make first letter lower case",
      "Set first letter of '" + issue.data.get(0) + "' to lower case",
      "Attribue.gif",
      [
        element, context |
        (element as Attribute).name = issue.data.get(0).toFirstLower
      ]
    )
  }

  @Fix(EntitiesValidator.ms_CIRCULAR_ENTITY_HIERARCHY)
  def void removeEntitySuperType(Issue issue, IssueResolutionAcceptor acceptor)
  {
    acceptor.accept(
      issue,
      "Remove the super-type",
      "Remove the super-type from '" + issue.data.get(1) + "'",
      "delete_obj.gif",
      [
        element, context |
        (element as Entity).superType = null
      ]
    )
  }

  @Fix(Diagnostic.LINKING_DIAGNOSTIC)
  def void createMissingEntity(Issue issue, IssueResolutionAcceptor acceptor)
  {
    var data = "<null>"
    if (issue.getData() != null) {
      data = "String[" + issue.getData().length + "]"
    }
    //System.out.println("data=" + data)
    var entityName = "<null>"
    if (issue.getData() != null && issue.getData().length > 0) {
      entityName = issue.getData().get(0)
    }
    acceptor.accept(
      issue,
      "Create missing entity",
      "Create missing entity after '" + entityName + "'",
      "Entity.gif",
      [
        element, context |
        val curEntity = element.getContainerOfType(typeof(Entity))
        val model = curEntity.eContainer as Model
        //var newEntity = EntitiesFactory.eINSTANCE.createEntity()
        //newEntity.name = context.xtextDocument.get(issue.offset, issue.length)
        model.entities.add(
          model.entities.indexOf(curEntity) + 1,
          EntitiesFactory.eINSTANCE.createEntity()=>
          [
            it.name = context.xtextDocument.get(issue.offset, issue.length)
          ]
        )
      ]
    )
  }
}
