/*
 * generated by Xtext
 */
package org.example.entities.generator

import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.IGenerator
import org.eclipse.xtext.generator.IFileSystemAccess
import org.example.entities.entities.Entity
import org.example.entities.entities.AttributeType
import org.example.entities.entities.BasicType
import org.example.entities.entities.EntityType

/**
 * Generates code from your model files on save.
 * 
 * see http://www.eclipse.org/Xtext/documentation.html#TutorialCodeGeneration
 */
class EntitiesGenerator implements IGenerator {
	
	override void doGenerate(Resource resource, IFileSystemAccess fsa)
	{
	  for (e : resource.allContents.toIterable.filter(typeof(Entity)))
	  {
  		fsa.generateFile("entities/" + e.name + ".java", e.compile)
		}
	}

  def compile(Entity entity)
  {
    '''
    package entities;

    public class «entity.name»«IF entity.superType != null» extends «entity.superType.name» «ENDIF»
    {
      «FOR attribute : entity.attributes»
      private «attribute.type.compile(false)» «attribute.name»;
      «ENDFOR»

      «FOR attribute : entity.attributes»
      public «attribute.type.compile(false)» get«attribute.name.toFirstUpper»()
      {
        return «attribute.name»;
      }

      public void set«attribute.name.toFirstUpper»(«attribute.type.compile(false)» _arg)
      {
        this.«attribute.name» = _arg;
      }

      «ENDFOR»
    }
    '''
  }

  def compile(AttributeType attrType, boolean isDeclaration)
  {
    attrType.elementType.typeToString +
      if (attrType.array)
      {
        if (isDeclaration) "[" + attrType.lenght + "]"
        else "[]"
      }
      else ""
  }

  def dispatch typeToString(BasicType type)
  {
    if (type.typeName == "string") "String"
    else type.typeName
  }

  def dispatch typeToString(EntityType type)
  {
    type.entity.name
  }
}
